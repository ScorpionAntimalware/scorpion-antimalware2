import threading
import time

class SAMEngine:
    def __init__(self):
        self.__engine_thread = None
        self.__scan_area_path = None
        self.__scanning = False

    def fire_engine_thread(self):
        if self.is_engine_thread_healthy():
            print("A thread for the engine already exists.", flush=True)
            return False
            
        self.__engine_thread = threading.Thread(target=self.__scan_file)
        return True
    
    def stop_engine_thread(self):
        if not self.is_engine_thread_healthy():
            print("No thread for the engine found.", flush=True)
            return False
        
        if not self.__engine_thread.is_alive():
            print("Thread is not running.", flush=True)
            return False

        self.__engine_thread.join()
        self.__scanning = False
        print("Thread stopped.", flush=True)
        return True
    
    def is_engine_thread_healthy(self):
        is_healthy = False
        if not self.__engine_thread is None:
            is_healthy = True
        return is_healthy

    def scan(self, scan_area_path: str):
        """
        Scans the given path for any malicious files.
        
        Parameters:
        - scan_area_path: The path to scan for malicious files
        """
        self.__scan_area_path = scan_area_path
        self.__scanning = True
        self.__engine_thread.start()
        print("Thread started.", flush=True)

    def __scan_file(self):
        print(f"Scanning {self.__scan_area_path} for malicious files...", flush=True)
        while self.__scanning:
            print(f"Thread is running with argument {self.__scan_area_path}...", flush=True)
            time.sleep(1)

    def __del__(self):
        self.stop_engine_thread()

def main():
    engine = SAMEngine()
    if not engine.fire_engine_thread():
        print("Thread is already running.", flush=True)
    engine.scan("C:/")
    print("Scanning...", flush=True)
    time.sleep(5)
    print("Stopping...", flush=True)
    engine.stop_engine_thread()


if __name__ == "__main__":
    main()
